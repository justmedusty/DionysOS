[Files]
Top Level:
include/memory/vmm.h
kernel/src/memory/vmm.c

x86_64:
kernel/src/architecture/architecture_specific/x86_64/memory/vmm.c
kernel/src/include/architecture/arch_vmm.h

[Public Functions]

void arch_kvm_init(p4d_t *pgdir) : This just copies the kernel page map into the given page directory, mostly only used when creating kernel threads

void arch_vmm_init() : This function is the first vmm function called and maps kernel memory to drop the bootloader mapped page tables that are initially present

struct virtual_region *create_region(uint64_t start_address, uint64_t size_pages, uint64_t type, uint64_t perms, bool contiguous) : This creates a region of the passed type of
the given size, permissions, and is contiguous if requested to be so. The region returned must be held onto until stored somewhere or attached.

void attach_region(struct virt_map *map, struct virtual_region *region) : This function attaches the passed region to the passed virtual map

void detach_region(struct virt_map *map, struct virtual_region *region) : This function detaches the given region from the given virtual map

void arch_dealloc_page_table(p4d_t *pgdir) : This function frees all of the pages in a passed page table, it is important to never pass the kernel page map to this function

void arch_map_pages(p4d_t *pgdir, uint64_t physaddr, uint64_t *va, uint64_t perms, uint64_t size) : This just maps pages starting from the given phys addr to the passed size, if you need to map
in a non contiguous manner, this function must be called in a loop


[Private Functions]

[x86_64]

void init_vmm() : This is the initial init function for x86, mapping the text, data, rodata etc segments into the kernel page tables and then loading CR3 register

void switch_page_table(p4d_t *page_dir) : This function simply switches page tables by loading CR3 with the passed page directory

int map_pages(p4d_t *pgdir, uint64_t physaddr, const uint64_t *va, uint64_t perms, uint64_t size) : This is just your mapping function, essentially functions the same way as the high level
function that invokes it, walks page tables and maps

uint64_t dealloc_va(p4d_t *pgdir, uint64_t address) : This deallocs a single page of memory from the given page directory at the given address

void dealloc_va_range(p4d_t *pgdir, uint64_t address, uint64_t size) : Same as above except loops over the range instead of a single page

void map_kernel_address_space(p4d_t *pgdir) : This simply maps tthe kernel data ,text , rodata etc into the passed page directory. This should only be called by init vmm it is wasteful to call
on each new kthread spawn

void load_vmm() : This function just loads the kernel page tables into CR3 register

pte_t *walk_page_directory(p4d_t *pgdir, const void *va, const int flags) : This is the function for actually walking the page tables for mapping


[Notes]